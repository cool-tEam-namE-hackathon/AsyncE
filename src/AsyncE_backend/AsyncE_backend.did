import "./ws_types.did";

type User = record {
    username: text;
    created_time_unix: nat;
    profile_picture_blob: blob;
};

type Group = record {
    id: nat;
    name: text;
    users: vec text;
    owner: text;
    created_time_unix: nat;
    profile_picture_blob: blob;
};

type GroupQueryResponse = record {
    id: nat;
    name: text;
    users: vec text;
    owner: text;
    created_time_unix: nat;
};

type Video = record {
    id: nat;
    data: blob;
    title: blob;
    created_by: text;
    created_time_unix: nat;
};

type VideoFrame = record {
    id: nat;
    data: blob;
    title: text;
    created_by: text;
    created_time_unix: nat;
};

type VideoHeader = record {
    id: nat;
    title: text;
    created_by: text;
    created_time_unix: nat;
};

type Chat = record {
    id: nat;
    group_id: nat;
    content: text;
    username: text;
    created_time_unix: nat;
};

type GroupInviteResponse = record {
    group_id: nat;
    group_name: text;
};

type WebsocketEventMessage = variant {
    Ping: null;
    GroupInvited: GroupInviteResponse;
    AddChat: Chat;
};

service : {
    get_user_credentials: () -> (variant {
        Ok: opt text;
        Err: text;
    }) query;

    register: (text) -> (variant {
        Ok: null;
        Err: text;
    });

    get_selfname: () -> (variant {
        Ok: opt text;
        Err: text;
    }) query;
    
    validate_username: (text) -> (variant {
        Ok: bool;
        Err: text;
    }) query;

    upload_profile_picture: (blob) -> (variant {
        Ok: null;
        Err: text;
    });

    get_profile_picture_size: () -> (variant {
        Ok: nat;
        Err: text;
    }) query;

    get_profile_picture_chunk_blob: (nat) -> (variant {
        Ok: blob;
        Err: text;
    }) query;

    create_group: (text) -> (variant {
        Ok: nat;
        Err: text;
    });

    get_all_groups: () -> (variant {
        Ok: vec GroupQueryResponse;
        Err: text;
    }) query;

    get_group: (nat) -> (variant {
        Ok: opt GroupQueryResponse;
        Err: text;
    }) query;

    upload_group_profile_picture: (nat, blob) -> (variant {
        Ok: null;
        Err: text;
    });

    get_group_profile_picture_size: (nat) -> (variant {
        Ok: nat;
        Err: text;
    }) query;

    get_group_profile_picture_chunk_blob: (nat, nat) -> (variant {
        Ok: blob;
        Err: text;
    }) query;

    get_videos: (nat) -> (variant {
        Ok: vec VideoHeader;
        Err: text;
    }) query;

    create_video: (nat, text) -> (variant {
        Ok: nat;
        Err: text;
    });

    upload_video: (nat, nat, blob, bool) -> (variant {
        Ok: null;
        Err: text;
    });

    get_video_detail: (nat, nat) -> (variant {
        Ok: VideoHeader;
        Err: text;
    });

    get_video_size: (nat, nat) -> (variant {
        Ok: nat;
        Err: text;
    });

    get_video_chunk_blob: (nat, nat, nat) -> (variant {
        Ok: blob;
        Err: text;
    });

    invite_user: (nat, text) -> (variant {
        Ok: null;
        Err: text;
    });

    get_self_group_invites: () -> (variant {
        Ok: vec GroupInviteResponse;
        Err: text;
    }) query;

    update_group_invite: (nat, bool) -> (variant {
        Ok: null;
        Err: text;
    });

    ws_open : (CanisterWsOpenArguments) -> (CanisterWsOpenResult);
    ws_close : (CanisterWsCloseArguments) -> (CanisterWsCloseResult);
    ws_message : (CanisterWsMessageArguments, opt WebsocketEventMessage) -> (CanisterWsMessageResult);
    ws_get_messages : (CanisterWsGetMessagesArguments) -> (CanisterWsGetMessagesResult) query;

    get_chats: (nat) -> (variant {
        Ok: vec Chat;
        Err: text;
    });
}
